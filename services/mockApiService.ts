import { AppSettings, ConversionStatus, GeneratedFiles } from '../types';

// Simulate network delay
const delay = (ms: number) => new Promise(res => setTimeout(res, ms));

export async function processImagesToFbx(
  images: File[],
  settings: AppSettings,
  setStatus: (status: ConversionStatus) => void
): Promise<GeneratedFiles> {
  if (images.length === 0) {
    throw new Error('No images provided for processing.');
  }

  try {
    setStatus(ConversionStatus.Uploading);
    console.log('Mock API: Uploading images...', { count: images.length, settings });
    await delay(1500); // Simulate upload time

    setStatus(ConversionStatus.Processing);
    console.log('Mock API: Processing images...');
    await delay(4000); // Simulate processing time

    // Create mock data using a real placeholder model for a better preview experience.
    const mockFiles: GeneratedFiles = {
      // The FBX file is a placeholder blob. A real backend would generate a proper file.
      fbxUrl: URL.createObjectURL(new Blob(["This is a placeholder FBX file from the mock API."], { type: 'application/octet-stream' })),
      // Use a real .glb model URL for an interactive preview.
      gltfUrl: 'https://modelviewer.dev/shared-assets/models/Astronaut.glb',
      textures: [], // The sample model is self-contained. Textures would be generated by a real backend.
      note: 'معاينة تفاعلية باستخدام نموذج رائد فضاء. الملفات التي تم تنزيلها هي بيانات وهمية لأغراض العرض.'
    };

    setStatus(ConversionStatus.Ready);
    console.log('Mock API: Processing complete.', mockFiles);
    
    return mockFiles;
  } catch (error) {
    console.error('Mock API Error:', error);
    setStatus(ConversionStatus.Error);
    throw new Error('Mock API failed to process images.');
  }
}